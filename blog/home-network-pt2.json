{"date":"2020-07-03","title":"Building A Home Lab With Podman - Pt2","desc":"Application routing is introduced into the home lab","file":"home-network-pt2","html":"<h1>Building A Home Lab With Podman - Pt2</h1>\n<p>In <a href=\"/blog/home-network-pt1\">Part 1</a> of this series I explain the desire to create a minimal home network running on containers, the stack being used to accomplish this, and how name resolution will work.</p>\n<p>This post will cover how services running as containers are routed.</p>\n<h2>Application Routing</h2>\n<p>While it's possible to port-forward every application container running on &quot;ct-host&quot; an issue exists with this approach.\nDNS alone is not capable of routing hostnames to particular ports.\nIn other words asking DNS to “map x.ldelossa.net =&gt; 192.168.1.100:8080” is not possible.</p>\n<p>An application routing mechanism is required for this.</p>\n<pre class=\"hljs\"><code>         +-----------------------------------------------------------------------+\n         |container network                                                      |\n         |  10.89.0.0/24                                                         |\n         |                                                    +------------+     |\n         |                               +--------------------&gt; Prometheus |     |\n         |                               |                    +------------+     |\n         |                               |                         :80           |\n         |                               |                          ^            |\n         |                               |                          |            |\n         |                           +---+-----+                    |            |\n         |   +-----------+           |         |              +-----+------+     |\n         +---+  CoreDNS  &lt;-----------+ CT-Host +--------------&gt; App Router +-----+\n             +-----------+           |         |              +------------+\n           192.168.185.10:53         +---------+             192.168.185.10:80\n                   ^                                                ^\n                   |                                                |\n                   |                                                |\n                   |                +-----------+                   |\n                   |                |           |                   |\n                   +----------------+Workstation+-------------------+\n                DNS Query           |           |              Route Mapping\nprom.ldelossa.net =&gt; 192.168.185.10 +-----------+   prom.ldelossa.net =&gt; prometheus:80\n</code></pre>\n<p>In the following diagram:</p>\n<ul>\n<li>A workstation makes a request for &quot;prom.ldelossa.net&quot;</li>\n<li>Our CoreDNS container answers the request with the ip address of &quot;ct-host&quot;</li>\n<li>Our app router is listening on port 80 and 443, the default ports a web browser will use when connecting to a web address.</li>\n<li>When the app router receives the request for the hostname &quot;prom.ldelossa.net&quot; it will forward this to the prometheus container running inside the container network.</li>\n<li>The request will be routed back through the app router and returned to the Workstation.</li>\n</ul>\n<p>The app router will also provide a redirection mechanism allowing hostnames to be mapped to forwarded ports on &quot;ct-host&quot;.</p>\n<h2>Traefik</h2>\n<p>Traefik will be the application routing mechanism.</p>\n<p>Personally, I don't have any experience running Traefik in production and this post isn't necessarily a plug for the application.</p>\n<p>However, it uses a modern configuration syntax, provides path routing and redirecting, has a pretty good UI, and comprehendable documentation.</p>\n<p>Traefik being written in Go is an added benefit as playing with Go projects help me design my own in the long run.</p>\n<h3>Configuration</h3>\n<p>It won't do much good echoing the already great documentation at <a href=\"https://docs.containo.us/\">Traefik's</a> site.\nIf you are interested in using Traefik check out their documentation.</p>\n<p>The following shows this lab's configuration.</p>\n<p>static configuration:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-section\">[api]</span>\n  <span class=\"hljs-attr\">insecure</span> = <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">dashboard</span> = <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[entryPoints]</span>\n  <span class=\"hljs-section\">[entryPoints.web]</span>\n    <span class=\"hljs-attr\">address</span> = <span class=\"hljs-string\">&quot;:80&quot;</span>\n\n<span class=\"hljs-section\">[providers]</span>\n  <span class=\"hljs-section\">[providers.file]</span>\n    <span class=\"hljs-attr\">filename</span> = <span class=\"hljs-string\">&quot;/etc/traefik/dyn.toml&quot;</span>\n    <span class=\"hljs-attr\">watch</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>dynamic configuration:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-section\">[http]</span>\n  <span class=\"hljs-section\">[http.routers]</span>\n    <span class=\"hljs-section\">[http.routers.prom]</span>\n      <span class=\"hljs-attr\">rule</span> = <span class=\"hljs-string\">&quot;Host(`prom.ldelossa.net`)&quot;</span>\n      <span class=\"hljs-attr\">service</span> = <span class=\"hljs-string\">&quot;prom&quot;</span>\n\n    <span class=\"hljs-section\">[http.routers.ct-host]</span>\n      <span class=\"hljs-attr\">rule</span> = <span class=\"hljs-string\">&quot;Host(`ct-host.ldelossa.net`)&quot;</span>\n      <span class=\"hljs-attr\">middlewares</span> = [<span class=\"hljs-string\">&quot;netdata-redirect&quot;</span>]\n      <span class=\"hljs-attr\">service</span> = <span class=\"hljs-string\">&quot;dummy&quot;</span>\n\n    <span class=\"hljs-section\">[http.routers.traefik]</span>\n      <span class=\"hljs-attr\">rule</span> = <span class=\"hljs-string\">&quot;Host(`traefik.ldelossa.net`)&quot;</span>\n      <span class=\"hljs-attr\">middlewares</span> = [<span class=\"hljs-string\">&quot;traefik-redirect&quot;</span>]\n      <span class=\"hljs-attr\">service</span> = <span class=\"hljs-string\">&quot;dummy&quot;</span>\n\n  <span class=\"hljs-section\">[http.middleware]</span>\n    <span class=\"hljs-section\">[http.middlewares.netdata-redirect.redirectRegex]</span>\n      <span class=\"hljs-attr\">regex</span> = <span class=\"hljs-string\">&quot;^http://ct-host.ldelossa.net(.*)&quot;</span>\n      <span class=\"hljs-attr\">replacement</span> = <span class=\"hljs-string\">&quot;http://ct-host.ldelossa.net:19999&quot;</span>\n\n    <span class=\"hljs-section\">[http.middlewares.traefik-redirect.redirectRegex]</span>\n      <span class=\"hljs-attr\">regex</span> = <span class=\"hljs-string\">&quot;^http://traefik.ldelossa.net(.*)&quot;</span>\n      <span class=\"hljs-attr\">replacement</span> = <span class=\"hljs-string\">&quot;http://traefik.ldelossa.net:8080&quot;</span>\n\n  <span class=\"hljs-section\">[http.services]</span>\n    <span class=\"hljs-section\">[http.services.dummy.loadBalancer]</span>\n    <span class=\"hljs-section\">[http.services.prom.loadBalancer]</span>\n      <span class=\"hljs-section\">[[http.services.prom.loadBalancer.servers]]</span>\n        <span class=\"hljs-attr\">url</span> = <span class=\"hljs-string\">&quot;http://prom:9090&quot;</span>\n</code></pre>\n<p>Traefik is split into two configs: static and dynamic.</p>\n<p>The static configuration sets up a listening socket on port :80 and this port is exposed on &quot;ct-host&quot;.\nThe dynamic configuration that Traefik will watch during runtime is defined as well.</p>\n<p>Dynamic configuration defines our routers, middleware, and services.\nHostname routing rules are defined mapping &quot;prom.ldelossa.net&quot; to the &quot;service&quot; prom.\nA &quot;service&quot; will forward traffic to the specified address, in this case the prometheus container.</p>\n<p>Middleware features are used to redirect requests for &quot;ct-host.ldelossa.net&quot; and &quot;traefik.ldelossa.net&quot; to ports forwarded on &quot;ct-host&quot;.\nA dummy &quot;service&quot; is created for the redirection as no traffic will be forwarded.</p>\n<h2>Deployment</h2>\n<p>The Traefik container is deployed in a container using Podman and is managed via Systemd in the same fashion explained in part 1 of this series.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> podman run -dt --network ct-host --name traefik -p 192.168.185.10:8080:8080 -p 192.168.185.10:80:80 -v /etc/containers/etc.d/traefik:/etc/traefik traefik:latest</span>\n</code></pre>\n<p>Make note that pots 8080 and 80 are exposed on &quot;ct-host&quot; directly, allowing devices on the local lan to access.\nThe configuration files are also mapped from the host allowing for easy maintenance from &quot;ct-host&quot;.</p>\n<h2>Conclusion</h2>\n<p>By introducing appliation routing into the lab several goals are achieved.</p>\n<ul>\n<li>Containers do not need to expose ports on the local lan to be accessed.</li>\n<li>Containers can be accessed by a hostname.</li>\n<li>Hostnames can be redirected to containers exposed directly on &quot;ct-host&quot;.</li>\n</ul>\n"}