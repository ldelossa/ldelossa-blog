{"date":"2020-08-06","title":"Git Worktree Flow","desc":"A workflow for keeping clean commit histories","file":"git-worktree-flow","html":"<h1>Git Worktree Flow</h1>\n<p>What does death and Git have in common?</p>\n<p>Just like death, Git is a fact of life for engineers writing code in 2021.</p>\n<p>Just like death, some people fear Git while others come to terms with it.</p>\n<p>It's safe to say there is no avoiding Git, like there is no avoiding death, may as well make it work for us.</p>\n<p>In this post I will share a new workflow utilizing Git's worktree feature that has been working well for me.</p>\n<h1>The Scenario</h1>\n<p>A repository exists, a topic branch is checked out, and it is complete.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">log</span></span>\ncommit 2d27894d5f6876ae456470f59a21bbd77184a853 (HEAD -&gt; topic-branch)\nAuthor: louis &lt;louis@localhost.localdomain&gt;\nDate:   Thu Aug 6 16:02:10 2020 -0400\n\n    implement plumbing\n\ncommit 1cecb9d66c84cc007479330eec08ce74ae583cd2\nAuthor: louis &lt;louis@localhost.localdomain&gt;\nDate:   Thu Aug 6 16:01:36 2020 -0400\n\n    implement business logic\n\ncommit abff991f6549435d2d8140182fc37603cff1a2c4\nAuthor: louis &lt;louis@localhost.localdomain&gt;\nDate:   Thu Aug 6 16:01:12 2020 -0400\n\n    implement storage\n</code></pre>\n<p>The commit structure is clean, organized, and communicates a clean trajectory of deployment.</p>\n<h1>Time For Review</h1>\n<p>A pull-request is opened against the mainline branch and a code review takes place.</p>\n<p>The requested changes are scattered across the clean commit history.</p>\n<p>A typical approach would involve making all the changes in a new commit with a comment such as &quot;code review changes&quot;.</p>\n<p>This approach is reasonable but wouldn't it be nice to keep the well organized commit history designed from the beginning?</p>\n<h1>Worktree To The Rescue</h1>\n<p>A Git worktree allows the same repository to exist in multiple file system directories at once.</p>\n<p>The worktree repository can have any branch checked out including a new one.</p>\n<p>To handle the code review changes but keep our commit structure the same a worktree can be created.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git worktree add ../myrepo-pr-changes</span>\nPreparing worktree (new branch &#x27;myrepo-pr-changes&#x27;)\nHEAD is now at 2d27894 implement plumbing\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> ../myrepo-pr-changes</span>\n</code></pre>\n<p>The command displayed above creates the worktree directory &quot;myrepo-pr-changes&quot; one directory above our current, creates the branch &quot;myrepo-pr-changes&quot;, and check this branch out in the worktree.</p>\n<p>The branch &quot;myrepo-pr-changes&quot; will be a staging area where the changes required to pass the code review can be implemented.</p>\n<p>This branch allows for all the niceties of a normal topic branch, you may author commits, reset any changes which you decide are not valuable, push this branch to save your work, etc...</p>\n<h1>Checking Out From Worktree</h1>\n<p>At this stage the worktree branch &quot;myrepo-pr-changes&quot; has all the commits necessary to comfort your code reviewers.</p>\n<p>It is time to get these changes back into the topic branch.</p>\n<p>We can diff the code between &quot;topic-branch&quot; and &quot;myrepo-pr-change&quot; worktree branch.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git diff --name-only topic-branch myrepo-pr-changes</span>\nbusinesslogic.go\nplumbing.go\nstore.go\n</code></pre>\n<p>The diff shows that specific files have changed in order to appease our code reviewers.</p>\n<p>An interactive rebase can get these changes into the correct commits by returning to the original repository directory.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> ../myrepo        </span>\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> git rebase -i HEAD~2</span>\n\n</code></pre>\n<p>Next the interactive prompt is displayed</p>\n<p>By specifying &quot;edit&quot; in one of our commits the changes present in the diff between &quot;topic-branch&quot; and &quot;myrepo-pr-changes&quot; can be checked out.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git rebase -i HEAD~2</span>\nStopped at 1cecb9d...  implement business logic\nYou can amend the commit now, with\n\n  git commit --amend\n\nOnce you are satisfied with your changes, run\n\n  git rebase --continue\n\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git checkout myrepo-pr-changes -- businesslogic.go</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git status</span>\ninteractive rebase in progress; onto abff991\nLast command done (1 command done):\n   edit 1cecb9d implement business logic\nNext command to do (1 remaining command):\n   pick 2d27894 implement plumbing\n  (use &quot;git rebase --edit-todo&quot; to view and edit)\nYou are currently editing a commit while rebasing branch &#x27;topic-branch&#x27; on &#x27;abff991&#x27;.\n  (use &quot;git commit --amend&quot; to amend the current commit)\n  (use &quot;git rebase --continue&quot; once you are satisfied with your changes)\n\nChanges to be committed:\n  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)\n    modified:   businesslogic.go\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git commit --amend</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-meta\">$</span><span class=\"bash\"> git rebase --<span class=\"hljs-built_in\">continue</span></span>\nSuccessfully rebased and updated refs/heads/topic-branch.\n</code></pre>\n<p>In the above Git sequence the interactive rebase has paused on the &quot;implement business logic&quot; after choosing &quot;edit&quot;.</p>\n<p>The file &quot;businesslogic.go&quot; from our &quot;myrepo-pr-changes&quot; branch is checked out immediately adding it to our staged commits.</p>\n<p>An amendment is made to &quot;implement business logic&quot; commit, incorporating the changes in &quot;businesslogic.go&quot;.</p>\n<p>The rebase is told to continue and subsequently finishes.</p>\n<h1>Conclusion</h1>\n<p>Being a bit of an eccentric about commit history, a well defined workflow for keeping things neat is attractive to me.</p>\n<p>The use of worktrees, cross branch checkouts, and interactive rebases creates one that has worked well so far.</p>\n<p>I hope this post gets the gears turning for your own workflows.</p>\n"}